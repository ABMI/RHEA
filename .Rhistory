filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T1|T2') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
# stage2
stage2 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T3|T4') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
# stage3
stage3 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N0|M1'))
# stage4
stage4 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'M1') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'M0'))
a <- TNMrecords %>% select(SUBJECT_ID, MEASUREMENT_SOURCE_VALUE)
b <- stage1 %>% select(SUBJECT_ID, MEASUREMENT_SOURCE_VALUE)
c <- stage2 %>% select(SUBJECT_ID, MEASUREMENT_SOURCE_VALUE)
d <- stage3 %>% select(SUBJECT_ID, MEASUREMENT_SOURCE_VALUE)
e <- stage4 %>% select(SUBJECT_ID, MEASUREMENT_SOURCE_VALUE)
f <- rbind(b,c,d,e)
nrow(a)
nrow(f)
anti_join(a, f, by = "SUBJECT_ID")
standardCycle
stage1
# TNM
sql_TNM <- "SELECT a.subject_id, ca.measurement_date, ca.measurement_source_value, ca.value_source_value
FROM @cohort_database_schema.@cohort_table a, @cdm_database_schema.cancer_measurement ca
WHERE a.subject_id = ca.person_id;"
sql_TNM <- SqlRender::render(sql_TNM,
cohort_database_schema = cohortDatabaseSchema,
cdm_database_schema = cdmDatabaseSchema,
cohort_table = cohortTable)
TNMrecords <- DatabaseConnector::querySql(connection, sql_TNM)
TNMrecords <- TNMrecords %>%
distinct(SUBJECT_ID,
MEASUREMENT_DATE,
MEASUREMENT_SOURCE_VALUE,
VALUE_SOURCE_VALUE) %>%
filter(str_detect(VALUE_SOURCE_VALUE, '^(C18|C19|C20)')) %>%
arrange(SUBJECT_ID, MEASUREMENT_DATE, desc(MEASUREMENT_SOURCE_VALUE))
# 같은날 유사 부위 2개 진단일 경우 grade가 더 높은 것 기준으로 중복제거
TNMrecords <- TNMrecords %>%
distinct(SUBJECT_ID, MEASUREMENT_DATE, .keep_all = TRUE)
# stage1
TNMstage1 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T1|T2') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
# stage2
TNMstage2 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T3|T4') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
# stage3
TNMstage3 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N0|M1'))
# stage4
TNMstage4 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'M1') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'M0'))
left_join(standardCycle, TNMstage1, by = c("subjecId"="SUBJECT_ID"))
left_join(standardCycle, TNMstage1, by = c("subjectId"="SUBJECT_ID"))
TNMstage1ids <- TNMstage1$SUBJECT_ID
standardCycle %>%
filter(subjectId %in% TNMstage1ids)
TNMstage1ids
TNMstage1ids
standardCycle %>%
filter(subjectId %in% TNMstage1ids)
# stage1
TNMstage1 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T1|T2') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
TNMstage1ids <- TNMstage1$SUBJECT_ID
STAGE1 <- standardCycle %>% filter(subjectId %in% TNMstage1ids)
# stage2
TNMstage2 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T3|T4') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
TNMstage2ids <- TNMstage2$SUBJECT_ID
STAGE2 <- standardCycle %>% filter(subjectId %in% TNMstage2ids)
# stage3
TNMstage3 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N0|M1'))
TNMstage3ids <- TNMstage3$SUBJECT_ID
STAGE3 <- standardCycle %>% filter(subjectId %in% TNMstage3ids)
# stage4
TNMstage4 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'M1') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'M0'))
TNMstage4ids <- TNMstage4$SUBJECT_ID
STAGE4 <- standardCycle %>% filter(subjectId %in% TNMstage4ids)
STAGE4
STAGE3
STAGE2
STAGE1
STAGE_df <- list(STAGE1, STAGE2, STAGE3, STAGE4)
STAGE_df[[i]]
i <- 1
STAGE_df[[i]]
STAGE_df
library(htmlwidgets)
htmlwidgets::shinyRenderWidget(heatmap)
i <- 1
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
heatmap
# Heatmap Plot
htmlwidgets::shinyRenderWidget(heatmap)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.')
htmlwidgets::saveWidget(heatmap, HMplot_fileName)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, HMplot_fileName)
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(outputFolder, HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, HMplot_fileName)
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPayway.html')
htmlwidgets::saveWidget(treatmentPathway, pathway_fileName)
}
}
outputFolder
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(outputFolder, HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, HMplot_fileName))
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPayway.html')
htmlwidgets::saveWidget(treatmentPathway, file.path(outputFolder, pathway_fileName))
}
}
# library for dashboard
library(lubridate)
library(ggplot2)
library(plyr)
library(RSQLite)
library(plotly)
library(quantmod)
library(data.table)
library(shiny)
library(shinyalert)
library(shinycssloaders)
library(shinydashboard)
library(shinythemes)
library(shinyWidgets)
library(summaryBox)
library(DT)
library(ggrepel)
library(gridExtra)
library(stringr)
library(dplyr)
library(xml2)
library(htmlwidgets)
library(RColorBrewer)
html_files <- list.files(path = outputFolder, pattern = "\\.html$", full.names = TRUE)
html_files
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(outputFolder, HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, HMplot_fileName))
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPathway.html')
htmlwidgets::saveWidget(treatmentPathway, file.path(outputFolder, pathway_fileName))
}
}
html_files <- list.files(path = outputFolder, pattern = "\\pathway.html$", full.names = TRUE)
html_files
html_files <- list.files(path = outputFolder, pattern = "pathway", full.names = TRUE)
html_files
html_files <- list.files(path = outputFolder, pattern = "\\.html$", full.names = TRUE)
html_files
# TNM
sql_TNM <- "SELECT a.subject_id, ca.measurement_date, ca.measurement_source_value, ca.value_source_value
FROM @cohort_database_schema.@cohort_table a, @cdm_database_schema.cancer_measurement ca
WHERE a.subject_id = ca.person_id;"
sql_TNM <- SqlRender::render(sql_TNM,
cohort_database_schema = cohortDatabaseSchema,
cdm_database_schema = cdmDatabaseSchema,
cohort_table = cohortTable)
TNMrecords <- DatabaseConnector::querySql(connection, sql_TNM)
TNMrecords <- TNMrecords %>%
distinct(SUBJECT_ID,
MEASUREMENT_DATE,
MEASUREMENT_SOURCE_VALUE,
VALUE_SOURCE_VALUE) %>%
filter(str_detect(VALUE_SOURCE_VALUE, '^(C18|C19|C20)')) %>%
arrange(SUBJECT_ID, MEASUREMENT_DATE, desc(MEASUREMENT_SOURCE_VALUE))
# 같은날 유사 부위 2개 진단일 경우 grade가 더 높은 것 기준으로 중복제거
TNMrecords <- TNMrecords %>%
distinct(SUBJECT_ID, MEASUREMENT_DATE, .keep_all = TRUE)
# stage1
TNMstage1 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T1|T2') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
TNMstage1ids <- TNMstage1$SUBJECT_ID
STAGE1 <- standardCycle %>% filter(subjectId %in% TNMstage1ids)
# stage2
TNMstage2 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'T3|T4') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3|M1'))
TNMstage2ids <- TNMstage2$SUBJECT_ID
STAGE2 <- standardCycle %>% filter(subjectId %in% TNMstage2ids)
# stage3
TNMstage3 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'N1|N2|N3') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'N0|M1'))
TNMstage3ids <- TNMstage3$SUBJECT_ID
STAGE3 <- standardCycle %>% filter(subjectId %in% TNMstage3ids)
# stage4
TNMstage4 <- TNMrecords %>%
filter(str_detect(MEASUREMENT_SOURCE_VALUE, 'M1') &
!str_detect(MEASUREMENT_SOURCE_VALUE, 'M0'))
TNMstage4ids <- TNMstage4$SUBJECT_ID
STAGE4 <- standardCycle %>% filter(subjectId %in% TNMstage4ids)
STAGE_df <- list(STAGE1, STAGE2, STAGE3, STAGE4)
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(paste0(outputFolder,"/heatmap"), HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, file.path(paste0(outputFolder,"/heatmap"), HMplot_fileName))
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPathway.html')
htmlwidgets::saveWidget(treatmentPathway, file.path(paste0(outputFolder, "/pathway"), pathway_fileName))
}
}
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(outputFolder, HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, HMplot_fileName))
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPayway.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, pathway_fileName))
}
}
html_files <- list.files(path = outputFolder, pattern = "\\.html$", full.names = TRUE)
html_files
current_data <- STAGE_df[[i]]
for (i in 1:4) {
current_data <- STAGE_df[[i]]
ParallelLogger::logInfo("Drawing distribution of the regimen iteration heatmap...")
heatmapPlotData <- heatmapData(connectionDetails,
cohortDatabaseSchema,
current_data,
targetCohortIds,
outputFolder)
heatmap <- treatmentIterationHeatmap(heatmapPlotData,
maximumCycleNumber = 18,
minSubject = 1)
ParallelLogger::logInfo("Drawing a flow chart of the treatment pathway...")
treatmentPathway <- treatmentPathway(connectionDetails,
cohortDatabaseSchema,
current_data,
outputFolder,
minimumRegimenChange = 1,
treatmentLine = 3,
collapseDates = 0,
minSubject = 0)
if(!is.null(outputFolder)){
# Heatmap Data
HMdata_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.csv')
write.csv(heatmapPlotData, file.path(outputFolder, HMdata_fileName), row.names = F)
# Heatmap Plot
HMplot_fileName <- paste0('RHEA_stage', i, '_','treatmentIterationHeatmap.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, HMplot_fileName))
# Tx pathway
pathway_fileName <- paste0('RHEA_stage', i, '_','treatmentPathway.html')
htmlwidgets::saveWidget(heatmap, file.path(outputFolder, pathway_fileName))
}
}
Path_file <- html_files %>% filter(str_detect("pathway"))
html_files
Path_file <- html_files[grep("pathway", html_files)]
Path_file
html_files <- list.files(path = outputFolder, pattern = "\\.html$", full.names = TRUE)
Pathway_file <- html_files[grep("pathway", html_files)]
Pathway_file
html_files
Pathway_file <- html_files[grep("Pathway", html_files)]
Pathway_file
# DB connection_5
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
# Load Cohort table
Cohort <- loadCohortTable()
# Load Episode table
Episode <- loadEpisodTable()
# Load note report
BiopsyResult <- loadReportTable()
# TNM stage code
TNMcode <- read.csv("./inst/csv/TNMcode.csv")
# TreatmentPathway figure
RegimenInfo <- loadRegimenlist()
# Calculation Patient care
PatientCareSummary <- calculation()
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
path_Regimenlist <- system.file("csv", "Info_CohortDescription.csv", package = "RHEA")
Regimenlist <-read.csv(path_Regimenlist,stringsAsFactors = F)
RegimenInfo <- Regimenlist
runApp('inst/Dashboard')
# DB connection_5
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
# Load Cohort table
Cohort <- loadCohortTable()
# Load Episode table
Episode <- loadEpisodTable()
# Load note report
BiopsyResult <- loadReportTable()
# TNM stage code
TNMcode <- read.csv("./inst/csv/TNMcode.csv")
# TreatmentPathway figure
RegimenInfo <- loadRegimenlist()
# Calculation Patient care
PatientCareSummary <- calculation()
Antibiotics <- read.csv("./inst/csv/AntibioticsConcepts.csv")
runApp('inst/Dashboard')
library(RHEA)
library(RHEA)
# library for dashboard
library(lubridate)
library(ggplot2)
library(plyr)
library(RSQLite)
library(plotly)
library(quantmod)
library(data.table)
library(shiny)
library(shinyalert)
library(shinycssloaders)
library(shinydashboard)
library(shinythemes)
library(shinyWidgets)
library(summaryBox)
library(DT)
library(ggrepel)
library(gridExtra)
library(stringr)
library(dplyr)
library(xml2)
library(htmlwidgets)
library(RColorBrewer)
################
## DB connect ##
################
# Details for connectiong to the server
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms= "sql server",
server='128.1.99.58',
user='seol',
password='Asdf1004!!',
port='1433',
pathToDriver = './')
oracleTempSchema <- NULL
cdmDatabaseSchema <- "CDMPv533_ABMI.dbo"
cohortDatabaseSchema <- "cohortDb.dbo"
vocaDatabaseSchema <- cdmDatabaseSchema
oncologyDatabaseSchema <- cdmDatabaseSchema
#########################
## 1. data preparation ##
#########################
# 1) OMOP-CDM tables - COHORT, EPISODE, EPISODE_EVENT
# - The cohorts in this package are designed to work with Atlas.
atlasID <- 2087 # ATLAS Cohort Definition ID
cohortTable <- "seol_RHEA_CRC_230529"
episodeTable <- "episode_seol_RHEA_230905"
episodeEventTable <- "episode_event_seol_RHEA_230905"
# DB connection_5
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
################
## DB connect ##
################
# Details for connectiong to the server
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms= "sql server",
server='128.1.99.58',
user='seol',
password='Asdf1004!!',
port='1433',
pathToDriver = './')
# DB connection_5
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
